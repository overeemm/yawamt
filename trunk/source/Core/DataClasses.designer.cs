#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YAWAMT
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="DEVENTIT_MONITORING4")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDowntime(Downtime instance);
    partial void UpdateDowntime(Downtime instance);
    partial void DeleteDowntime(Downtime instance);
    partial void InsertServiceUptime(ServiceUptime instance);
    partial void UpdateServiceUptime(ServiceUptime instance);
    partial void DeleteServiceUptime(ServiceUptime instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertServiceStatus(ServiceStatus instance);
    partial void UpdateServiceStatus(ServiceStatus instance);
    partial void DeleteServiceStatus(ServiceStatus instance);
    partial void InsertUrl(Url instance);
    partial void UpdateUrl(Url instance);
    partial void DeleteUrl(Url instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::YAWAMT.Properties.Settings.Default.DEVENTIT_MONITORING4ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Downtime> Downtimes
		{
			get
			{
				return this.GetTable<Downtime>();
			}
		}
		
		public System.Data.Linq.Table<ServiceUptime> ServiceUptimes
		{
			get
			{
				return this.GetTable<ServiceUptime>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<ServiceStatus> ServiceStatus
		{
			get
			{
				return this.GetTable<ServiceStatus>();
			}
		}
		
		public System.Data.Linq.Table<Url> Urls
		{
			get
			{
				return this.GetTable<Url>();
			}
		}
	}
	
	[Table(Name="dbo.Downtimes")]
	public partial class Downtime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Begintijd;
		
		private System.Nullable<System.DateTime> _Eindtijd;
		
		private bool _Hard;
		
		private int _Url;
		
		private EntityRef<Url> _Url1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBegintijdChanging(System.DateTime value);
    partial void OnBegintijdChanged();
    partial void OnEindtijdChanging(System.Nullable<System.DateTime> value);
    partial void OnEindtijdChanged();
    partial void OnHardChanging(bool value);
    partial void OnHardChanged();
    partial void OnUrlChanging(int value);
    partial void OnUrlChanged();
    #endregion
		
		public Downtime()
		{
			this._Url1 = default(EntityRef<Url>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Begintijd", DbType="DateTime NOT NULL")]
		public System.DateTime Begintijd
		{
			get
			{
				return this._Begintijd;
			}
			set
			{
				if ((this._Begintijd != value))
				{
					this.OnBegintijdChanging(value);
					this.SendPropertyChanging();
					this._Begintijd = value;
					this.SendPropertyChanged("Begintijd");
					this.OnBegintijdChanged();
				}
			}
		}
		
		[Column(Storage="_Eindtijd", DbType="DateTime")]
		public System.Nullable<System.DateTime> Eindtijd
		{
			get
			{
				return this._Eindtijd;
			}
			set
			{
				if ((this._Eindtijd != value))
				{
					this.OnEindtijdChanging(value);
					this.SendPropertyChanging();
					this._Eindtijd = value;
					this.SendPropertyChanged("Eindtijd");
					this.OnEindtijdChanged();
				}
			}
		}
		
		[Column(Storage="_Hard", DbType="Bit NOT NULL")]
		public bool Hard
		{
			get
			{
				return this._Hard;
			}
			set
			{
				if ((this._Hard != value))
				{
					this.OnHardChanging(value);
					this.SendPropertyChanging();
					this._Hard = value;
					this.SendPropertyChanged("Hard");
					this.OnHardChanged();
				}
			}
		}
		
		[Column(Storage="_Url", DbType="Int NOT NULL")]
		public int Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					if (this._Url1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[Association(Name="Url_Downtime", Storage="_Url1", ThisKey="Url", OtherKey="ID", IsForeignKey=true)]
		public Url Url1
		{
			get
			{
				return this._Url1.Entity;
			}
			set
			{
				Url previousValue = this._Url1.Entity;
				if (((previousValue != value) 
							|| (this._Url1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Url1.Entity = null;
						previousValue.Downtimes.Remove(this);
					}
					this._Url1.Entity = value;
					if ((value != null))
					{
						value.Downtimes.Add(this);
						this._Url = value.ID;
					}
					else
					{
						this._Url = default(int);
					}
					this.SendPropertyChanged("Url1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ServiceUptime")]
	public partial class ServiceUptime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _StartTime;
		
		private System.Nullable<System.DateTime> _ShutdownTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnShutdownTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnShutdownTimeChanged();
    #endregion
		
		public ServiceUptime()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ShutdownTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ShutdownTime
		{
			get
			{
				return this._ShutdownTime;
			}
			set
			{
				if ((this._ShutdownTime != value))
				{
					this.OnShutdownTimeChanging(value);
					this.SendPropertyChanging();
					this._ShutdownTime = value;
					this.SendPropertyChanged("ShutdownTime");
					this.OnShutdownTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Naam;
		
		private int _Periode;
		
		private System.Nullable<int> _Retries;
		
		private System.Nullable<int> _RetriesPeriode;
		
		private EntitySet<Url> _Urls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNaamChanging(string value);
    partial void OnNaamChanged();
    partial void OnPeriodeChanging(int value);
    partial void OnPeriodeChanged();
    partial void OnRetriesChanging(System.Nullable<int> value);
    partial void OnRetriesChanged();
    partial void OnRetriesPeriodeChanging(System.Nullable<int> value);
    partial void OnRetriesPeriodeChanged();
    #endregion
		
		public Setting()
		{
			this._Urls = new EntitySet<Url>(new Action<Url>(this.attach_Urls), new Action<Url>(this.detach_Urls));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Naam", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string Naam
		{
			get
			{
				return this._Naam;
			}
			set
			{
				if ((this._Naam != value))
				{
					this.OnNaamChanging(value);
					this.SendPropertyChanging();
					this._Naam = value;
					this.SendPropertyChanged("Naam");
					this.OnNaamChanged();
				}
			}
		}
		
		[Column(Storage="_Periode", DbType="Int NOT NULL")]
		public int Periode
		{
			get
			{
				return this._Periode;
			}
			set
			{
				if ((this._Periode != value))
				{
					this.OnPeriodeChanging(value);
					this.SendPropertyChanging();
					this._Periode = value;
					this.SendPropertyChanged("Periode");
					this.OnPeriodeChanged();
				}
			}
		}
		
		[Column(Storage="_Retries", DbType="Int")]
		public System.Nullable<int> Retries
		{
			get
			{
				return this._Retries;
			}
			set
			{
				if ((this._Retries != value))
				{
					this.OnRetriesChanging(value);
					this.SendPropertyChanging();
					this._Retries = value;
					this.SendPropertyChanged("Retries");
					this.OnRetriesChanged();
				}
			}
		}
		
		[Column(Storage="_RetriesPeriode", DbType="Int")]
		public System.Nullable<int> RetriesPeriode
		{
			get
			{
				return this._RetriesPeriode;
			}
			set
			{
				if ((this._RetriesPeriode != value))
				{
					this.OnRetriesPeriodeChanging(value);
					this.SendPropertyChanging();
					this._RetriesPeriode = value;
					this.SendPropertyChanged("RetriesPeriode");
					this.OnRetriesPeriodeChanged();
				}
			}
		}
		
		[Association(Name="Setting_Url", Storage="_Urls", ThisKey="ID", OtherKey="Settings")]
		public EntitySet<Url> Urls
		{
			get
			{
				return this._Urls;
			}
			set
			{
				this._Urls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Urls(Url entity)
		{
			this.SendPropertyChanging();
			entity.Setting = this;
		}
		
		private void detach_Urls(Url entity)
		{
			this.SendPropertyChanging();
			entity.Setting = null;
		}
	}
	
	[Table(Name="dbo.ServiceStatus")]
	public partial class ServiceStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<System.DateTime> _VolgendePulse;
		
		private System.Nullable<System.DateTime> _LaatstePulse;
		
		private int _ID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVolgendePulseChanging(System.Nullable<System.DateTime> value);
    partial void OnVolgendePulseChanged();
    partial void OnLaatstePulseChanging(System.Nullable<System.DateTime> value);
    partial void OnLaatstePulseChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public ServiceStatus()
		{
			OnCreated();
		}
		
		[Column(Storage="_VolgendePulse", DbType="DateTime")]
		public System.Nullable<System.DateTime> VolgendePulse
		{
			get
			{
				return this._VolgendePulse;
			}
			set
			{
				if ((this._VolgendePulse != value))
				{
					this.OnVolgendePulseChanging(value);
					this.SendPropertyChanging();
					this._VolgendePulse = value;
					this.SendPropertyChanged("VolgendePulse");
					this.OnVolgendePulseChanged();
				}
			}
		}
		
		[Column(Storage="_LaatstePulse", DbType="DateTime")]
		public System.Nullable<System.DateTime> LaatstePulse
		{
			get
			{
				return this._LaatstePulse;
			}
			set
			{
				if ((this._LaatstePulse != value))
				{
					this.OnLaatstePulseChanging(value);
					this.SendPropertyChanging();
					this._LaatstePulse = value;
					this.SendPropertyChanged("LaatstePulse");
					this.OnLaatstePulseChanged();
				}
			}
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Urls")]
	public partial class Url : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Url1;
		
		private int _ID;
		
		private string _Naam;
		
		private int _Settings;
		
		private System.Nullable<System.DateTime> _LaatstePulse;
		
		private System.Nullable<int> _CurrentPeriode;
		
		private EntitySet<Downtime> _Downtimes;
		
		private EntityRef<Setting> _Setting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUrl1Changing(string value);
    partial void OnUrl1Changed();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNaamChanging(string value);
    partial void OnNaamChanged();
    partial void OnSettingsChanging(int value);
    partial void OnSettingsChanged();
    partial void OnLaatstePulseChanging(System.Nullable<System.DateTime> value);
    partial void OnLaatstePulseChanged();
    partial void OnCurrentPeriodeChanging(System.Nullable<int> value);
    partial void OnCurrentPeriodeChanged();
    #endregion
		
		public Url()
		{
			this._Downtimes = new EntitySet<Downtime>(new Action<Downtime>(this.attach_Downtimes), new Action<Downtime>(this.detach_Downtimes));
			this._Setting = default(EntityRef<Setting>);
			OnCreated();
		}
		
		[Column(Name="Url", Storage="_Url1", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Url1
		{
			get
			{
				return this._Url1;
			}
			set
			{
				if ((this._Url1 != value))
				{
					this.OnUrl1Changing(value);
					this.SendPropertyChanging();
					this._Url1 = value;
					this.SendPropertyChanged("Url1");
					this.OnUrl1Changed();
				}
			}
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Naam", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Naam
		{
			get
			{
				return this._Naam;
			}
			set
			{
				if ((this._Naam != value))
				{
					this.OnNaamChanging(value);
					this.SendPropertyChanging();
					this._Naam = value;
					this.SendPropertyChanged("Naam");
					this.OnNaamChanged();
				}
			}
		}
		
		[Column(Storage="_Settings", DbType="Int NOT NULL")]
		public int Settings
		{
			get
			{
				return this._Settings;
			}
			set
			{
				if ((this._Settings != value))
				{
					if (this._Setting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSettingsChanging(value);
					this.SendPropertyChanging();
					this._Settings = value;
					this.SendPropertyChanged("Settings");
					this.OnSettingsChanged();
				}
			}
		}
		
		[Column(Storage="_LaatstePulse", DbType="DateTime")]
		public System.Nullable<System.DateTime> LaatstePulse
		{
			get
			{
				return this._LaatstePulse;
			}
			set
			{
				if ((this._LaatstePulse != value))
				{
					this.OnLaatstePulseChanging(value);
					this.SendPropertyChanging();
					this._LaatstePulse = value;
					this.SendPropertyChanged("LaatstePulse");
					this.OnLaatstePulseChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentPeriode", DbType="Int")]
		public System.Nullable<int> CurrentPeriode
		{
			get
			{
				return this._CurrentPeriode;
			}
			set
			{
				if ((this._CurrentPeriode != value))
				{
					this.OnCurrentPeriodeChanging(value);
					this.SendPropertyChanging();
					this._CurrentPeriode = value;
					this.SendPropertyChanged("CurrentPeriode");
					this.OnCurrentPeriodeChanged();
				}
			}
		}
		
		[Association(Name="Url_Downtime", Storage="_Downtimes", ThisKey="ID", OtherKey="Url")]
		public EntitySet<Downtime> Downtimes
		{
			get
			{
				return this._Downtimes;
			}
			set
			{
				this._Downtimes.Assign(value);
			}
		}
		
		[Association(Name="Setting_Url", Storage="_Setting", ThisKey="Settings", OtherKey="ID", IsForeignKey=true)]
		public Setting Setting
		{
			get
			{
				return this._Setting.Entity;
			}
			set
			{
				Setting previousValue = this._Setting.Entity;
				if (((previousValue != value) 
							|| (this._Setting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Setting.Entity = null;
						previousValue.Urls.Remove(this);
					}
					this._Setting.Entity = value;
					if ((value != null))
					{
						value.Urls.Add(this);
						this._Settings = value.ID;
					}
					else
					{
						this._Settings = default(int);
					}
					this.SendPropertyChanged("Setting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Downtimes(Downtime entity)
		{
			this.SendPropertyChanging();
			entity.Url1 = this;
		}
		
		private void detach_Downtimes(Downtime entity)
		{
			this.SendPropertyChanging();
			entity.Url1 = null;
		}
	}
}
#pragma warning restore 1591
